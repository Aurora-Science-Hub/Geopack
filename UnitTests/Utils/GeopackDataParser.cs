using System.Globalization;
using AuroraScienceHub.Geopack.UnitTests.Geopack2008.TestData;

namespace AuroraScienceHub.Geopack.UnitTests.Utils;

public static class GeopackDataParser
{
    /// <summary>
    /// Parse test data for Trace and full flow generated by Tsyganenko's example code
    /// </summary>
    /// <param name="data"> Test data </param>
    public static ApprovedGeopackData ParseRecalcCommons(string data)
    {
        var lines = data.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
        var result = new ApprovedGeopackData();
        var lineIndex = 0;

        // Parse header
        var headerParts = lines[lineIndex++].Split(new[] { ' ', '=', '\t' }, StringSplitOptions.RemoveEmptyEntries);
        var year = int.Parse(headerParts[1]);
        var doy = int.Parse(headerParts[3]);
        var hour = int.Parse(headerParts[5]);
        var minute = int.Parse(headerParts[7]);
        result.DateTime = new DateTime(year, 1, 1, hour, minute, 0).AddDays(doy - 1);

        // Parse solar wind pressure
        var solarWindParts = lines[lineIndex++].Split(new[] { ':', ' ' }, StringSplitOptions.RemoveEmptyEntries);
        result.VGSEX = float.Parse(solarWindParts[3], NumberStyles.Float);
        result.VGSEY = float.Parse(solarWindParts[4], NumberStyles.Float);
        result.VGSEZ = float.Parse(solarWindParts[5], NumberStyles.Float);

        // Parse Common1 coefficients
        var common1string = lines[lineIndex++].Split(new[] { ' ', '=' }, StringSplitOptions.RemoveEmptyEntries);
        result.ST0 = float.Parse(common1string[2], NumberStyles.Float);
        result.CT0 = float.Parse(common1string[3], NumberStyles.Float);
        result.SL0 = float.Parse(common1string[4], NumberStyles.Float);
        result.CL0 = float.Parse(common1string[5], NumberStyles.Float);
        result.CTCL = float.Parse(common1string[6], NumberStyles.Float);
        result.STCL = float.Parse(common1string[7], NumberStyles.Float);
        result.CTSL = float.Parse(common1string[8], NumberStyles.Float);
        result.STSL = float.Parse(common1string[9], NumberStyles.Float);
        result.SFI = float.Parse(common1string[10], NumberStyles.Float);
        result.CFI = float.Parse(common1string[11], NumberStyles.Float);
        result.SPS = float.Parse(common1string[12], NumberStyles.Float);
        result.CPS = float.Parse(common1string[13], NumberStyles.Float);
        result.DS3 = float.Parse(common1string[14], NumberStyles.Float);
        result.CGST = float.Parse(common1string[15], NumberStyles.Float);
        result.SGST = float.Parse(common1string[16], NumberStyles.Float);
        result.PSI = float.Parse(common1string[17], NumberStyles.Float);
        result.A11 = float.Parse(common1string[18], NumberStyles.Float);
        result.A21 = float.Parse(common1string[19], NumberStyles.Float);
        result.A31 = float.Parse(common1string[20], NumberStyles.Float);
        result.A12 = float.Parse(common1string[21], NumberStyles.Float);
        result.A22 = float.Parse(common1string[22], NumberStyles.Float);
        result.A32 = float.Parse(common1string[23], NumberStyles.Float);
        result.A13 = float.Parse(common1string[24], NumberStyles.Float);
        result.A23 = float.Parse(common1string[25], NumberStyles.Float);
        result.A33 = float.Parse(common1string[26], NumberStyles.Float);
        result.E11 = float.Parse(common1string[27], NumberStyles.Float);
        result.E21 = float.Parse(common1string[28], NumberStyles.Float);
        result.E31 = float.Parse(common1string[29], NumberStyles.Float);
        result.E12 = float.Parse(common1string[30], NumberStyles.Float);
        result.E22 = float.Parse(common1string[31], NumberStyles.Float);
        result.E32 = float.Parse(common1string[32], NumberStyles.Float);
        result.E13 = float.Parse(common1string[33], NumberStyles.Float);
        result.E23 = float.Parse(common1string[34], NumberStyles.Float);
        result.E33 = float.Parse(common1string[35], NumberStyles.Float);

        // Parse coordinates
        while (lineIndex < lines.Length)
        {
            var ghrec = lines[lineIndex++].Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
            if (ghrec.Length != 3)
            {
                continue;
            }

            var g = float.Parse(ghrec[0], NumberStyles.Float);
            var h = float.Parse(ghrec[1], NumberStyles.Float);
            var rec = float.Parse(ghrec[2], NumberStyles.Float);

            result.Common2?.Add((g, h, rec));
        }

        return result;
    }

    /// <summary>
    /// Parse test data for Trace and full flow generated by Tsyganenko's example code
    /// </summary>
    /// <param name="data"> Test data </param>
    public static ApprovedGeopackData ParseTrace(string data)
    {
        var lines = data.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
        var result = new AuroraScienceHub.Geopack.UnitTests.Geopack2008.TestData.ApprovedGeopackData();
        var lineIndex = 0;

        // Parse header
        var headerParts = lines[lineIndex++].Split(new[] { ' ', '=', '\t' }, StringSplitOptions.RemoveEmptyEntries);
        var year = int.Parse(headerParts[1]);
        var doy = int.Parse(headerParts[3]);
        var hour = int.Parse(headerParts[5]);
        var minute = int.Parse(headerParts[7]);
        result.DateTime = new DateTime(year, 1, 1, hour, minute, 0).AddDays(doy - 1);

        // Parse solar wind pressure
        var solarWindParts = lines[lineIndex++].Split(new[] { ':', ' ' }, StringSplitOptions.RemoveEmptyEntries);
        result.SolarWindPressure = float.Parse(solarWindParts[5], NumberStyles.Float);

        // Parse DST index
        var dstParts = lines[lineIndex++].Split(new[] { ':', ' ' }, StringSplitOptions.RemoveEmptyEntries);
        result.DstIndex = float.Parse(dstParts[1], NumberStyles.Float);

        // Parse IMF By and Bz
        var imfParts = lines[lineIndex++].Split(new[] { ':', ' ' }, StringSplitOptions.RemoveEmptyEntries);
        result.ByIMF = float.Parse(imfParts[4], NumberStyles.Float);
        result.BzIMF = float.Parse(imfParts[5], NumberStyles.Float);

        // Skip the line "THE LINE IN GSW COORDS:"
        lineIndex++;

        // Parse coordinates
        while (lineIndex < lines.Length)
        {
            var coordParts = lines[lineIndex++].Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
            if (coordParts.Length != 3)
            {
                continue;
            }

            var x = float.Parse(coordParts[0], NumberStyles.Float);
            var y = float.Parse(coordParts[1], NumberStyles.Float);
            var z = float.Parse(coordParts[2], NumberStyles.Float);
            result.FieldLineCoordinates?.Add((x, y, z));
        }

        return result;
    }

    /// <summary>
    /// Fill Solar Wind Parameters for original Tsyganenko's dataset
    /// </summary>
    /// <param name="testData"> Parsed from file dataset </param>
    public static void FillBasicOriginalDataSolarWindVelocity(this AuroraScienceHub.Geopack.UnitTests.Geopack2008.TestData.ApprovedGeopackData testData)
    {
        testData.VGSEX = -304.0f;

        testData.VGSEY = -16.0f;
        testData.VGSEY += 29.78f;

        testData.VGSEZ = 4.0f;
    }
}
